extends:
  - eslint:recommended
  - plugin:@typescript-eslint/recommended # typescript specific rules
  - plugin:@typescript-eslint/recommended-requiring-type-checking
  - plugin:eslint-comments/recommended # ESLint rules for ESLint directive comments
  - plugin:jsdoc/recommended # documentation
  - plugin:sonarjs/recommended # code quality
  - prettier # ignore formatting issue
env:
  es6: true
  node: true
  jest: true
parser: '@typescript-eslint/parser'
parserOptions:
  project: tsconfig.json
  sourceType: module
plugins:
  - '@typescript-eslint' # typescript support
  - header # enforce a header in each source file
  - jsdoc # enforce documentation
  - no-secrets # check if there's any secret left in the code
settings:
  jsdoc:
    mode: typescript
ignorePatterns:
  - '{output}'
  - '{test}'
  - types
  - '**/*.js'
rules:
  # Documentation
  jsdoc/newline-after-description: # doesn't need a new line after description
    - error
    - never
  jsdoc/require-description: # a description is a must
    - warn
    - checkConstructors: false
      checkGetters: false
      checkSetters: false
  jsdoc/require-jsdoc: # all functions must be documented
    - warn
    - require:
        ClassDeclaration: true
        ClassExpression: true
        FunctionDeclaration: false
        FunctionExpression: true
        MethodDefinition: false
      exemptEmptyConstructors: true
      contexts:
        # for non-exported functions
        - Program > TSDeclareFunction:not(TSDeclareFunction + TSDeclareFunction)
        - Program > FunctionDeclaration:not(TSDeclareFunction + FunctionDeclaration)
        # for exported functions
        - ExportNamedDeclaration[declaration.type=TSDeclareFunction]:not(ExportNamedDeclaration[declaration.type=TSDeclareFunction]
          + ExportNamedDeclaration[declaration.type=TSDeclareFunction])
        - ExportNamedDeclaration[declaration.type=FunctionDeclaration]:not(ExportNamedDeclaration[declaration.type=TSDeclareFunction]
          + ExportNamedDeclaration[declaration.type=FunctionDeclaration])
        # for class methods
        - MethodDefinition[value.body=null]:not(MethodDefinition[value.body=null] + MethodDefinition[value.body=null])
        - MethodDefinition[value.body]:not(MethodDefinition[value.body=null] + MethodDefinition)
  jsdoc/require-param-type: off # don't need type information as we use typescript
  jsdoc/require-property-type: off # don't need type information as we use typescript
  jsdoc/require-returns: # tell us what the function is expected to return
    - error
    - checkGetters: false
  jsdoc/require-returns-type: off # don't need type information as we use typescript

  # ECMAScript
  '@typescript-eslint/prefer-for-of': warn # use for of if possible
  '@typescript-eslint/prefer-nullish-coalescing': warn # simplify a logic by using the nullish coalescing operator
  '@typescript-eslint/prefer-optional-chain': warn # simplify a logic by using the optional chain operator
  object-shorthand: warn # reduce {x:x} to {x}
  prefer-const: # if a variable is never reassigned, using the const declaration is better
    - warn
    - destructuring: all
  prefer-destructuring: # get variables via destructuring for better readability
    - warn
    - AssignmentExpression:
        array: false # allow const foo = array[100];
  prefer-rest-params: error # use a rested variable instead of arguments
  prefer-spread: error # instead of using fn.apply(this, args), simply use fn(...args)
  symbol-description: error # describe a symbol

  # Stylistic Issues
  '@typescript-eslint/member-ordering': error # member group in a class should be in order
  '@typescript-eslint/naming-convention': error # use JS/TS naming convention
  header/header: # need a file header
    - error
    - block
    - - pattern: Copyright
  capitalized-comments: # use lower case in comments
    - warn
    - never
    - ignorePattern: '\*|\/|/|\s'
  one-var: # require variable to be declared only one per line
    - warn
    - never
  spaced-comment: error # enforce consistent spacing after the `//` or `/*` in a comment

  # Best Practices
  '@typescript-eslint/array-type': # requires using either T[] or Array<T> depending on the type complexity
    - warn
    - default: array-simple
  '@typescript-eslint/explicit-function-return-type': # tell us what is expected in return
    - warn
    - allowExpressions: true
  '@typescript-eslint/explicit-member-accessibility': # whether it's protected, private or public, tell us
    - error
    - overrides:
        constructors: 'no-public'
  '@typescript-eslint/no-base-to-string': error # disallow Object.toString() which returns the meaningless [object Object]
  '@typescript-eslint/no-magic-numbers': # only allow obvious cases
    - warn
    - ignore:
        - -1
        - 0
        - 1
      ignoreArrayIndexes: true
      ignoreNumericLiteralTypes: true
      ignoreReadonlyClassProperties: true
      ignoreEnums: true
  '@typescript-eslint/no-parameter-properties': warn # no private, readonly etc in functional arguments
  '@typescript-eslint/promise-function-async': warn # ensure any function that returns a promise to be marked async for better readability
  '@typescript-eslint/require-await': off # sometimes you need an async function to fulfil the signature inherited from an abstract class
  '@typescript-eslint/return-await': error # return an awaited promised in the try catch block for better stack trace
  curly: error # all control statement must be enclosed by a curly bracket
  default-case: error # ensure a default case in any switch
  eqeqeq: error # enforce type-safe equality operators
  max-classes-per-file: error # only one class max for a file
  no-async-promise-executor: off # turn off in order to use await in the executor function
  no-magic-numbers: off # use @typescript-eslint/no-magic-numbers instead
  no-return-await: off # use @typescript-eslint/return-await instead
  no-throw-literal: warn # only an error instance should be thrown
  no-var: error # use let or const instead
  padding-line-between-statements: # always have a blank line before return for better readability
    - warn
    - blankLine: always
      prev: '*'
      next: return
  prefer-object-spread: warn # use {...obj} for cloning instead of Object.assign({}, obj)

  # Code Quality
  '@typescript-eslint/no-explicit-any': off # allow any type
  '@typescript-eslint/no-unnecessary-condition': error # reduce the complexity of a piece of code by removing redundant logic
  '@typescript-eslint/no-unused-expressions': error # unused expressions must be at least commented
  '@typescript-eslint/no-unused-vars': # use a name starting with _ as a placeholder instead
    - error
    - varsIgnorePattern: ^_
      argsIgnorePattern: ^_
  '@typescript-eslint/prefer-function-type': warn # make a function a function instead of an interface
  '@typescript-eslint/unified-signatures': warn # simplify an overloading signature
  no-secrets/no-secrets: error # no sensitive information
  sonarjs/cognitive-complexity: # ensure a function is intuitively understandable
    - warn
    - 5
  sonarjs/no-small-switch: off # sometimes you prefer switch than if for extension and better readability
  complexity: warn # limit cyclomatic complexity in a function
  max-lines: # it's hard to follow a large file
    - warn
    - max: 250
      skipBlankLines: true
      skipComments: true
  max-lines-per-function: # it's hard to follow a long function
    - warn
    - max: 30
      skipBlankLines: true
      skipComments: true
      IIFEs: true
  no-console: warn # console is often used for debug, but it can leak sensitive information
  no-eval: error # eval is evil

  # Error Prevention
  '@typescript-eslint/no-misused-promises': # ensure that there's an await before a promise
    - warn
    - checksVoidReturn: false
  '@typescript-eslint/no-non-null-assertion': off # sometimes typescript fails to detect that a variable is non-null
  '@typescript-eslint/no-use-before-define': # things should be used only after they're declared
    - warn
    - functions: false
  block-scoped-var: error # disallow usage of a scoped variable outside of its scope
  no-param-reassign: error # it may be useful only when you're testing, not something finished
  no-sparse-arrays: warn # very unlikely you want an undefined in something like [va1, , var2]
  no-template-curly-in-string: warn # unlikely you have any use case with the ${} syntax in a string
